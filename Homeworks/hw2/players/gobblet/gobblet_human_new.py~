from game_player import *
from gobblet import *


# A human-interactive GobbletPlayer agent.
class GobbletPlayer(GamePlayer):

	# Make a note of our player ID
	# see comments on GamePlayer for more details
	def __init__(self, player_id):
		GamePlayer.__init__(self, player_id)
	
	# This agent doesn't evaluate states, so just return 0
	#
	# "state" is a GobbletState object
	def evaluate(self, state):
		return 0
	
	def minimax_move(self, state, visited):
		# see what the valid moves are so we can check the human's answer
		successors = state.successor_moves()
		successors = [x.get_move() for x in successors]
		sizeNames = ['S','M','L']
		size = None
		
		# Keep looping until the human gives us valid input
		while True:
                        src = raw_input("What square would you like to move to or pick up from (1-9, q to quit)? ")
                        target = None
			if src == 'q':
				# Quit by forfeiting
				return GobbletMove(None, True)
			try:
				src = int(src)
			except:
				print "Please input an integer 0-9, or q to quit. "
				continue
			
			if src >= 1 and src <= 9:
				src -= 1
				src = (src / 3, src % 3)
			else:
				print "Please input an integer 1-9, or q to quit. "
				continue

                        placingNew = False
			if state.board_value(src) == None or state.board_value(src).player != state.get_next_player():
                                placingNew = True
                        else:
                                #existing piece there, do we want to move it or cover it?
                                if state.board_value(src).size < 2:
                                        cover = raw_input("Do you want to cover your old piece? (y/n) ")
                                        if cover == 'y':
                                                placingNew=True
                                        elif cover == 'n':
                                                placingNew=False
                                        else:
                                                print "Please answer y/n"
                                                continue
                        if placingNew:
                                #placing a new piece
                                avail = []
                                if state.board_value(src) == None:
                                        avail = [0,1,2]
                                else:
                                        avail = range(state.board_value(src).size+1,3)
                                avail = [s for s in avail if state.pieces_available(state.get_next_player(), s) > 0]
                                if len(avail) == 0:
                                        print "Unable to place a piece at that location"
                                        continue
                                if len(avail) == 1:
                                        size = avail[0]
                                        print "Using piece of size "+str(size)
                                else:
                                        availSizeNames = [sizeNames[s] for s in avail]
                                        size = raw_input("What size piece would you like to use (%s)? "%(",".join(availSizeNames),))
                                        try:
        					size = avail[availSizeNames.index(size.upper())]
                                        except:
        					print "Please input one of (%s)"%(",".join(availSizeNames),)
                				continue
                        		if size not in avail:
                                                print "Please input one of (%s)"%(",".join(availSizeNames),)
                                                continue
                                target = src
                                src = None                                                     
                        else:
                                size = state.board_value(src).size
                                # Ask
                                target = raw_input("What square would you like to move to (1-9)? ")
			
                                # Human may not have input an integer
                                try:
        				target = int(target)
                                except:
        				print "Please input an integer 1-9. "
                			continue
			
                                if target >= 1 and target <= 9:
                                        target -= 1
                                        target = (target / 3, target % 3)
                                else:
        				print "Please input an integer 1-9. "
                                        continue


                        """
			src = raw_input("What square would you like to pick up from (1-9, q to quit, "\
							"0 to place a new piece)? ")
			if src == 'q':
				# Quit by forfeiting
				return GobbletMove(None, True)
			try:
				src = int(src)
			except:
				print "Please input an integer 0-9, or q to quit. "
				continue
			
			if src >= 0 and src <= 9:
				src -= 1
			else:
				print "Please input an integer 0-9, or q to quit. "
				continue
				
			if src >= 0:
				src = (src / 3, src % 3)
				if state.board_value(src) == None or state.board_value(src).player != state.get_next_player():
					print "You do not have a topmost piece at that location. "
					continue
				size = state.board_value(src).size
				valid = False
				for successor in successors:
					if successor.source == src:
						valid = True
						break
				if not valid:
                                        print "That piece is covering a piece that would cause the opponent to win."
			else:
				src = None
				size = raw_input("What size piece would you like to use (0-2)? ")
				try:
					size = int(size)
				except:
					print "Please input an integer 0-2. "
					continue
				if size < 0 or size > 2:
					print "Please input an integer 0-2. "
					continue
				
				if state.pieces_available(state.get_next_player(), size) <= 0:
					print "You do not have any pieces of that size available. "
					continue
		
			# Ask
			target = raw_input("What square would you like to move to (1-9)? ")
			
			# Human may not have input an integer
			try:
				target = int(target)
			except:
				print "Please input an integer 1-9. "
				continue
			
			if target >= 1 and target <= 9:
				target -= 1
				target = (target / 3, target % 3)
			else:
				print "Please input an integer 1-9. "
				continue
			"""
			move = GobbletMove(GobbletMoveDetail(src, target, 
							     GobbletPiece(state.get_next_player(), size)))
						
			# Human may not have input a valid move
			if not state.is_valid_move(move):
				print "That is not a valid move.  Please choose a target square that "\
					"is occupied only by smaller pieces or no pieces. "
				continue
			
			# Return the valid move
			return move
			
def make_player(playerID):
	return GobbletPlayer(playerID)
